#!/usr/bin/env python3
"""
Script de gerenciamento do banco de dados Vinihida Beverages
Usa Flask-Migrate para gerenciar migra√ß√µes do SQLAlchemy
"""

import os
import sys
from flask.cli import FlaskGroup
from flask_migrate import init, migrate, upgrade, downgrade, history, show
from app import create_app
from models import db, User, Product, Category, Order, OrderItem, Cart, CartItem

def create_app_for_cli():
    """Cria inst√¢ncia da app para CLI"""
    return create_app()

cli = FlaskGroup(create_app=create_app_for_cli)

@cli.command()
def init_db():
    """Inicializa o banco de dados com migra√ß√µes"""
    print("üîÑ Inicializando sistema de migra√ß√µes...")
    
    # Verifica se j√° existe o diret√≥rio migrations
    if os.path.exists('migrations'):
        print("‚ö†Ô∏è  Diret√≥rio migrations j√° existe. Removendo...")
        import shutil
        shutil.rmtree('migrations')
    
    # Inicializa as migra√ß√µes
    init()
    print("‚úÖ Sistema de migra√ß√µes inicializado!")
    
    # Cria migra√ß√£o inicial
    print("üîÑ Criando migra√ß√£o inicial...")
    migrate(message='Initial migration')
    print("‚úÖ Migra√ß√£o inicial criada!")
    
    # Aplica a migra√ß√£o
    print("üîÑ Aplicando migra√ß√£o...")
    upgrade()
    print("‚úÖ Migra√ß√£o aplicada com sucesso!")

@cli.command()
def seed_db():
    """Popula o banco com dados iniciais"""
    print("üå± Populando banco de dados com dados iniciais...")
    
    # Verifica se j√° existem categorias
    if Category.query.first():
        print("‚ö†Ô∏è  Dados j√° existem no banco. Pulando seed...")
        return
    
    # Cria categorias
    categories = [
        Category(name='Vinhos'),
        Category(name='Whiskies'),
        Category(name='Cervejas')
    ]
    
    for cat in categories:
        db.session.add(cat)
    
    db.session.commit()
    print("‚úÖ Categorias criadas!")
    
    # Cria produtos
    products = [
        Product(name='Vinho Tinto Premium', description='Vinho tinto encorpado com notas de frutas vermelhas', price=89.90, category_id=1, image_url='https://images.unsplash.com/photo-1510812431401-41d2bd2722f3?w=300&h=300&fit=crop'),
        Product(name='Whisky Single Malt', description='Whisky escoc√™s envelhecido por 12 anos', price=250.00, category_id=2, image_url='https://images.unsplash.com/photo-1569529465841-dfecdab7503b?w=300&h=300&fit=crop'),
        Product(name='Cerveja Artesanal IPA', description='India Pale Ale com l√∫pulos arom√°ticos', price=25.90, category_id=3, image_url='https://images.unsplash.com/photo-1608270586620-248524c67de9?w=300&h=300&fit=crop'),
        Product(name='Vinho Branco Seco', description='Vinho branco refrescante e mineral', price=65.90, category_id=1, image_url='https://images.unsplash.com/photo-1510812431401-41d2bd2722f3?w=300&h=300&fit=crop'),
        Product(name='Bourbon Premium', description='Bourbon americano envelhecido em carvalho', price=180.00, category_id=2, image_url='https://images.unsplash.com/photo-1569529465841-dfecdab7503b?w=300&h=300&fit=crop'),
        Product(name='Cerveja Pilsner', description='Cerveja lager clara e refrescante', price=18.90, category_id=3, image_url='https://images.unsplash.com/photo-1608270586620-248524c67de9?w=300&h=300&fit=crop'),
        Product(name='Vinho Ros√©', description='Vinho ros√© delicado e frutado', price=45.90, category_id=1, image_url='https://images.unsplash.com/photo-1510812431401-41d2bd2722f3?w=300&h=300&fit=crop'),
        Product(name='Whisky Japon√™s', description='Whisky japon√™s suave e complexo', price=320.00, category_id=2, image_url='https://images.unsplash.com/photo-1569529465841-dfecdab7503b?w=300&h=300&fit=crop'),
        Product(name='Cerveja Stout', description='Cerveja escura e cremosa', price=22.90, category_id=3, image_url='https://images.unsplash.com/photo-1608270586620-248524c67de9?w=300&h=300&fit=crop'),
        Product(name='Champagne Premium', description='Champagne franc√™s de alta qualidade', price=450.00, category_id=1, image_url='https://images.unsplash.com/photo-1510812431401-41d2bd2722f3?w=300&h=300&fit=crop'),
    ]
    
    for prod in products:
        db.session.add(prod)
    
    db.session.commit()
    print("‚úÖ Produtos criados!")
    
    print(f"üéâ Banco populado com {len(categories)} categorias e {len(products)} produtos!")

@cli.command()
def reset_db():
    """Remove e recria o banco de dados"""
    print("‚ö†Ô∏è  ATEN√á√ÉO: Isso ir√° APAGAR todos os dados!")
    confirm = input("Digite 'CONFIRMAR' para continuar: ")
    
    if confirm != 'CONFIRMAR':
        print("‚ùå Opera√ß√£o cancelada.")
        return
    
    print("üóëÔ∏è  Removendo banco de dados...")
    db.drop_all()
    
    print("üîÑ Recriando banco de dados...")
    db.create_all()
    
    print("‚úÖ Banco de dados resetado!")
    print("üí° Execute 'python manage.py seed_db' para popular com dados iniciais.")

@cli.command()
def show_tables():
    """Mostra as tabelas do banco de dados"""
    print("üìä Tabelas no banco de dados:")
    
    # Conecta ao banco e lista tabelas
    with db.engine.connect() as conn:
        from sqlalchemy import text
        result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table';"))
        tables = result.fetchall()
        
        if not tables:
            print("‚ùå Nenhuma tabela encontrada.")
            return
        
        for table in tables:
            table_name = table[0]
            print(f"  üìã {table_name}")
            
            # Conta registros
            count_result = conn.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
            count = count_result.fetchone()[0]
            print(f"     ‚îî‚îÄ‚îÄ {count} registros")

@cli.command()
def backup_db():
    """Cria backup do banco de dados"""
    from datetime import datetime
    import shutil
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"backup_ecommerce_{timestamp}.db"
    
    try:
        shutil.copy('instance/ecommerce.db', f'backups/{backup_name}')
        print(f"‚úÖ Backup criado: backups/{backup_name}")
    except FileNotFoundError:
        os.makedirs('backups', exist_ok=True)
        shutil.copy('instance/ecommerce.db', f'backups/{backup_name}')
        print(f"‚úÖ Backup criado: backups/{backup_name}")
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")

@cli.command()
def create_migration():
    """Cria uma nova migra√ß√£o"""
    message = input("Digite a mensagem da migra√ß√£o: ")
    if not message:
        message = "Auto migration"
    
    print(f"üîÑ Criando migra√ß√£o: {message}")
    migrate(message=message)
    print("‚úÖ Migra√ß√£o criada!")

@cli.command()
def apply_migrations():
    """Aplica todas as migra√ß√µes pendentes"""
    print("üîÑ Aplicando migra√ß√µes...")
    upgrade()
    print("‚úÖ Migra√ß√µes aplicadas!")

@cli.command()
def migration_history():
    """Mostra hist√≥rico de migra√ß√µes"""
    print("üìú Hist√≥rico de migra√ß√µes:")
    history()

if __name__ == '__main__':
    cli() 